apiVersion: v1
kind: ConfigMap
metadata:
  name: kapacitor-alerts
  namespace: kube-system
data:
  high_cpu.tick: |
    stream
        |from()
            .measurement('cpu/node_utilization')
            .groupBy('nodename')
        |window()
            .period(5m)
            .every(5m)
        |mean('value').as('used')
        |alert()
            .message('{{ .Level}}: {{ .Name }}/{{ index .Tags "nodename" }} has high cpu usage: {{ index .Fields "used" }}%')
            .warn(lambda: "used" > 0.70)
            .crit(lambda: "used" > 0.80)
            .email()
  high_memory.tick: |
    stream
        |from()
            .measurement('memory/node_utilization')
            .groupBy('nodename')
        |window()
            .period(5m)
            .every(5m)
        |mean('value').as('used')
        |alert()
            .message('{{ .Level}}: {{ .Name }}/{{ index .Tags "nodename" }} has high memory usage: {{ index .Fields "used" }}%')
            .warn(lambda: "used" > 0.70)
            .crit(lambda: "used" > 0.80)
            .email()
  uptime.tick: |
    var period = 1m
    var every = 1m
    var warn = 300 // seconds
    var warnReset = 600 // seconds

    var node_down = stream
        |from()
            .measurement('uptime')
            .groupBy('*')
            .where(lambda: "type" == 'node')
        |deadman(0.0, 5m)
            .message('Node {{ index .Tags "nodename" }} is down')
            .stateChangesOnly()
            .email()

    var uptime = stream
        |from()
            .measurement('uptime')
            .groupBy('nodename')
            .where(lambda: "type" == 'node')
        |window()
            .period(period)
            .every(every)
        |eval(lambda: ceil(float("value") / 1000.0))
            .as('uptime')

    var trigger = uptime
        |alert()
            .message('{{ .Level }} / Node {{ index .Tags "nodename" }} was rebooted')
            .warn(lambda: "uptime" < warn)
            .warnReset(lambda: "uptime" > warnReset)
            .stateChangesOnly()
            .details('''
    <b>{{ .Message }}</b>
    Level: {{ .Level }}
    Nodename: {{ index .Tags "nodename" }}
    Uptime: {{ index .Fields "uptime" }} sec
    ''')
            .email()
