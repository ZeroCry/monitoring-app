apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    k8s-app: heapster
    name: heapster
  name: heapster
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: heapster
  template:
    metadata:
      labels:
        k8s-app: heapster
    spec:
      containers:
      - name: heapster
        image: monitoring-heapster:1.0.2
        command:
        - /usr/bin/dumb-init
        - /heapster
        - --source=kubernetes:https://kubernetes.default.svc.cluster.local?kubeletPort=10250&kubeletHttps=true
        - --sink=influxdb:http://influxdb:8086
---
apiVersion: v1
kind: Service
metadata:
  labels:
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: Heapster
  name: heapster
  namespace: kube-system
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 8082
    nodePort: 32500
  selector:
    k8s-app: heapster
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    name: influxdb
  name: influxdb
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      name: influxdb
  template:
    metadata:
      labels:
        name: influxdb
    spec:
      containers:
      - name: watcher
        image: watcher:0.0.1
        args:
          - --mode=rollups
      - name: influxdb
        image: monitoring-influxdb:0.13.0
        volumeMounts:
        - mountPath: /data
          name: influxdb-storage
      volumes:
      - name: influxdb-storage
        hostPath:
          path: /var/lib/data/influxdb
---
apiVersion: v1
kind: Service
metadata:
  labels: null
  name: influxdb
  namespace: kube-system
spec:
  type: NodePort
  ports:
  - name: http
    port: 8083
    nodePort: 32501
  - name: api
    port: 8086
    nodePort: 32502
  selector:
    name: influxdb
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    k8s-app: grafana
    name: grafana
  name: grafana
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: monitoring-grafana:3.0.4
        imagePullPolicy: Always
        env:
          - name: GF_SECURITY_ADMIN_USER
            valueFrom:
              secretKeyRef:
                name: grafana
                key: username
          - name: GF_SECURITY_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: grafana
                key: password
        volumeMounts:
          - name: config
            mountPath: /etc/grafana
      volumes:
        - name: config
          configMap:
            name: grafana
---
apiVersion: v1
kind: Service
metadata:
  labels:
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: Grafana
  name: grafana
  namespace: kube-system
spec:
  type: NodePort
  ports:
  - name: grafana
    port: 3000
    nodePort: 32503
  selector:
    app: grafana
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rollups-default
  namespace: kube-system
data:
  rollups: |
    [
      {
        "retention": "medium",
        "measurement": "cpu/usage_rate",
        "name": "cpu/usage_rate/medium",
        "functions": [
          {
            "function": "max",
            "field": "value",
            "alias": "value_max"
          },
          {
            "function": "mean",
            "field": "value",
            "alias": "value_mean"
          }
        ]
      },
      {
        "retention": "medium",
        "measurement": "memory/usage",
        "name": "memory/usage/medium",
        "functions": [
          {
            "function": "max",
            "field": "value",
            "alias": "value_max"
          },
          {
            "function": "mean",
            "field": "value",
            "alias": "value_mean"
          }
        ]
      },
      {
        "retention": "medium",
        "measurement": "filesystem/usage",
        "name": "filesystem/usage/medium",
        "functions": [
          {
            "function": "max",
            "field": "value"
          }
        ]
      },
      {
        "retention": "medium",
        "measurement": "network/tx",
        "name": "network/tx/medium",
        "functions": [
          {
            "function": "max",
            "field": "value"
          }
        ]
      },
      {
        "retention": "medium",
        "measurement": "network/tx_rate",
        "name": "network/tx_rate/medium",
        "functions": [
          {
            "function": "max",
            "field": "value",
            "alias": "value_max"
          },
          {
            "function": "mean",
            "field": "value",
            "alias": "value_mean"
          }
        ]
      },
      {
        "retention": "medium",
        "measurement": "network/rx",
        "name": "network/rx/medium",
        "functions": [
          {
            "function": "max",
            "field": "value"
          }
        ]
      },
      {
        "retention": "medium",
        "measurement": "network/rx_rate",
        "name": "network/rx_rate/medium",
        "functions": [
          {
            "function": "max",
            "field": "value",
            "alias": "value_max"
          },
          {
            "function": "mean",
            "field": "value",
            "alias": "value_mean"
          }
        ]
      },
      {
        "retention": "long",
        "measurement": "cpu/usage_rate",
        "name": "cpu/usage_rate/long",
        "functions": [
          {
            "function": "max",
            "field": "value",
            "alias": "value_max"
          },
          {
            "function": "mean",
            "field": "value",
            "alias": "value_mean"
          }
        ]
      },
      {
        "retention": "long",
        "measurement": "memory/usage",
        "name": "memory/usage/long",
        "functions": [
          {
            "function": "max",
            "field": "value",
            "alias": "value_max"
          },
          {
            "function": "mean",
            "field": "value",
            "alias": "value_mean"
          }
        ]
      },
      {
        "retention": "long",
        "measurement": "filesystem/usage",
        "name": "filesystem/usage/long",
        "functions": [
          {
            "function": "max",
            "field": "value"
          }
        ]
      },
      {
        "retention": "long",
        "measurement": "network/tx",
        "name": "network/tx/long",
        "functions": [
          {
            "function": "max",
            "field": "value"
          }
        ]
      },
      {
        "retention": "long",
        "measurement": "network/tx_rate",
        "name": "network/tx_rate/long",
        "functions": [
          {
            "function": "max",
            "field": "value",
            "alias": "value_max"
          },
          {
            "function": "mean",
            "field": "value",
            "alias": "value_mean"
          }
        ]
      },
      {
        "retention": "long",
        "measurement": "network/rx",
        "name": "network/rx/long",
        "functions": [
          {
            "function": "max",
            "field": "value"
          }
        ]
      },
      {
        "retention": "long",
        "measurement": "network/rx_rate",
        "name": "network/rx_rate/long",
        "functions": [
          {
            "function": "max",
            "field": "value",
            "alias": "value_max"
          },
          {
            "function": "mean",
            "field": "value",
            "alias": "value_mean"
          }
        ]
      }
    ]
